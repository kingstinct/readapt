scalar JSONObject

directive @auth(
  match: JSONObject,
  skip: Boolean
  includes: JSONObject
) on FIELD_DEFINITION

type Query {
  validateJWT(token: String!): Boolean! @auth(skip: true)
  readJWT(token: String!): JSONObject! @auth(skip: true)
  publicKey: String! @auth(skip: true)

  # resolver for testing if the organisationId matches the variable
  privateShitWithRole: String! @auth(match: { role: "admin" })

  # resolver for testing if the organisationId matches the variable
  variableReference(organisationId: String!): String! @auth(
    match: {
      role: "admin",
      organisationId: "$organisationId"
    }
  )

  # resolver for testing if the roles array in the token includes a matching object
  includes(organisationId: String!): String! @auth(
    includes: {
      roles: {
        role: "admin",
        organisationId: "$organisationId"
      }
    }
  )
  # todo [>=1.0.0]: support array matching one of many
  # privateShitWithRoleAndOrganizationArray(organisationId: String!): String! @auth(
  #   includesAny: {
  #     roles: [{
  #       role: "admin",
  #       organisationId: "$organisationId"
  #     }, {
  #       role: "superadmin",
  #       organisationId: "$organisationId"
  #     }]
  #   }
  # )
  privateShit: String!
  publicShit: String! @auth(skip: true)
}
