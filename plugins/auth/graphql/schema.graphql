scalar JSONObject

directive @auth(
  match: JSONObject,
  skip: Boolean
  # includes: JSONObject
) on FIELD_DEFINITION

type Query {
  validateJWT(token: String!): Boolean! @auth(skip: true)
  readJWT(token: String!): JSONObject! @auth(skip: true)
  publicKey: String! @auth(skip: true)

  privateShitWithRole: String! @auth(match: { role: "admin" })
  # todo [>=1.0.0]: support argument matching
  # privateShitWithRoleAndOrganization(organisationId: String!): String! @auth(
  #   match: {
  #     role: "admin",
  #     organisationId: "$organisationId"
  #   }
  # )
  # todo [>=1.0.0]: support array matching
  # privateShitWithRoleAndOrganizationArray(organisationId: String!): String! @auth(
  #   includes: {
  #     roles: {
  #       role: "admin",
  #       organisationId: "$organisationId"
  #     }
  #   }
  # )
  # todo [>=1.0.0]: support array matching one of many
  # privateShitWithRoleAndOrganizationArray(organisationId: String!): String! @auth(
  #   includesAny: {
  #     roles: [{
  #       role: "admin",
  #       organisationId: "$organisationId"
  #     }, {
  #       role: "superadmin",
  #       organisationId: "$organisationId"
  #     }]
  #   }
  # )
  privateShit: String!
  publicShit: String! @auth(skip: true)
}
