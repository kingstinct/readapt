scalar JSONObject
directive @oneOf on INPUT_OBJECT | FIELD_DEFINITION

input AuthOr {
  includes: JSONObject
  match: JSONObject
}

directive @auth(
  match: JSONObject,
  skip: Boolean
  includes: JSONObject
  or: [AuthOr!]
) on FIELD_DEFINITION

scalar Date
scalar DateTime

type Query {
  getEntityByName(name: String!): Entity
  getEntityByPluralizedName(pluralizedName: String!): Entity
  getAllEntities: [Entity!]!
}

type Mutation {
  createEntity(name: String!, pluralizedName: String!, isPublishable: Boolean): Entity! @auth(includes: { permissions: { type: "modify-entity" } })
  removeEntity(name: String!): Boolean! @auth(includes: { permissions: { type: "modify-entity" } })
  renameEntity(fromName: String!, toName: String!, pluralizedName: String!): Entity! @auth(includes: { permissions: { type: "modify-entity" } })

  addFieldsToEntity(entityName: String!, fields: [FieldInput!]!): Entity! @auth(includes: { permissions: { type: "modify-entity" } })
  removeFieldsFromEntity(entityName: String!, fields: [String!]!): Entity! @auth(includes: { permissions: { type: "modify-entity" } })
}

input FieldInput @oneOf {
  StringField: StringFieldInput
  NumberField: NumberFieldInput
  BooleanField: BooleanFieldInput
  ArrayField: ArrayFieldInput
  EntityRelationField: EntityRelationFieldInput
}

input FieldInputWithoutArray @oneOf {
  StringField: StringFieldInput
  NumberField: NumberFieldInput
  BooleanField: BooleanFieldInput
  EntityRelationField: EntityRelationFieldInput
}

input StringFieldInput {
  name: String!
  isRequired: Boolean
  isRequiredInput: Boolean
  maxLength: Int
  minLength: Int
  defaultValue: String
  isSearchable: Boolean
}

input NumberFieldInput {
  name: String!
  isRequired: Boolean
  isRequiredInput: Boolean
  max: Float
  min: Float
  defaultValue: Float
}

input BooleanFieldInput {
  name: String!
  isRequired: Boolean
  isRequiredInput: Boolean
  defaultValue: Boolean
}

input ArrayFieldInput {
  name: String!
  availableFields: [FieldInputWithoutArray!]!
  isRequired: Boolean
  isRequiredInput: Boolean
  maxItems: Int
  minItems: Int
}

input EntityRelationFieldInput {
  name: String!
  #entityName: EntityEnum! // lets make this a string for now, would be nice to tie together with the dynamic schema
  entityName: String!
  isRequired: Boolean!
  isRequiredInput: Boolean
}

interface Field {
  name: String!
  isRequired: Boolean!
  isRequiredInput: Boolean!
}

type StringField implements Field {
  name: String!
  isRequired: Boolean!
  isRequiredInput: Boolean!
  maxLength: Int
  minLength: Int
  defaultValue: String
  isSearchable: Boolean!
}

type IDField implements Field {
  name: String!
  isRequired: Boolean!
  isRequiredInput: Boolean!
}

type NumberField implements Field {
  name: String!
  isRequired: Boolean!
  isRequiredInput: Boolean!
  max: Float
  min: Float
  defaultValue: Float
}

type BooleanField implements Field {
  name: String!
  isRequired: Boolean!
  isRequiredInput: Boolean!
  defaultValue: Boolean
}

# let's make these pluggable
# type DateField implements Field {
#
#   name: String!
#   isRequired: Boolean!
#   min: Date
#   max: Date
# }

# type DateTimeField implements Field {
#
#   name: String!
#   isRequired: Boolean!
#   min: DateTime
#   max: DateTime
# }

# type ImageField implements Field {
#
#   isRequired: Boolean!
#   name: String!
# }

# type VideoField implements Field {
#
#   isRequired: Boolean!
#   name: String!
# }

# type FileField implements Field {
#
#   isRequired: Boolean!
#   name: String!
# }

type ArrayField implements Field {
  name: String!
  availableFields: [Field!]!
  isRequired: Boolean!
  isRequiredInput: Boolean!
  maxItems: Int
  minItems: Int
}

type EntityRelationField implements Field {
  name: String!
  entityName: String!
  entity: Entity!
  isRequired: Boolean!
  isRequiredInput: Boolean!
}

type EntityPermission {
  # null means available without auth
  type: String

  read: Boolean!
  create: Boolean!
  modify: Boolean!
  delete: Boolean!
  publish: Boolean!
  unpublish: Boolean!

  granular: Boolean!
}

type Entity {
  name: String!
  fields: [Field!]!
  pluralizedName: String!
  permissions: [EntityPermission!]
  isPublishable: Boolean!
}

input EntityInput {
  name: String!
}
