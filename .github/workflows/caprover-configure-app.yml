# This is a basic workflow to help you get started with Actions

name: Create Caprover App

on:
  workflow_call:
    secrets:
      caproverPassword:
        required: true
      SLACK_WEBHOOK:
        required: false
    inputs:
      discordWebhook:
        required: false
        type: string
      envFile:
        required: false
        type: string
        default: .env.github
      caproverAppName:
        required: true
        type: string
      caproverDomain:
        required: true
        type: string
      deployTargetUrl:
        required: false
        type: string
      deploymentEnvFile:
        required: false
        type: string
      deploymentEnvVars:
        required: false
        type: string
        default: "[]"
      hasPersistentData:
        type: boolean
        required: false
        default: false
      websocketSupport:
        type: boolean
        required: false
        default: true
      containerHttpPort:
        type: number
        default: 80
      instanceCount:
        type: number
        default: 1
  workflow_dispatch:
    inputs:
      discordWebhook:
        required: false
        type: string
      envFile:
        required: false
        type: string
        default: .env.github
      deploymentEnvFile:
        required: false
        type: string
      deploymentEnvVars:
        required: false
        type: string
        default: "[]"
      caproverAppName:
        required: true
        type: string
      caproverDomain:
        required: true
        type: string
      deployTargetUrl:
        required: false
        type: string
      hasPersistentData:
        type: boolean
        required: false
        default: false
      websocketSupport:
        type: boolean
        required: false
        default: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    concurrency: deploy-to-kingstinct-dev
    env:
      CAPROVER_URL: https://captain.${{ inputs.caproverDomain }}
      defaultDeployTargetUrl: "https://${{ inputs.caproverAppName }}.${{ inputs.caproverDomain }}"
      CAPROVER_PASSWORD: ${{ secrets.caproverPassword }}
      envVars: ${{ inputs.deploymentEnvVars }}
      CAPROVER_APP: ${{ inputs.caproverAppName }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    environment:
      name: ${{ inputs.caproverAppName }}
      url: ${{ inputs.deployTargetUrl || env.defaultDeployTargetUrl }}
    steps:
      - uses: actions/checkout@v4

      - uses: cardinalby/export-env-action@v2
        with:
          envFile: ${{ inputs.envFile }}

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Create Caprover App üë®‚Äç‚úàÔ∏è
        run: bunx caprover api --path=/user/apps/appDefinitions/register --method=POST --data='{"appName":"${{ inputs.caproverAppName }}","hasPersistentData":${{ inputs.hasPersistentData }}}' || true

        # # should optimally combine manual env vars (that could contain secrets) with .env file, problem with .ts here is the dependency on the code from the workflow..
      - name: Read env file
        if: ${{ inputs.deploymentEnvFile }}
        env:
          ENV_PATH: ${{ inputs.deploymentEnvFile }}
          DEBUG: true
        # for some reason this isn't quite working yet (it works when run locally both in zsh and bash), would be nice to get it working
        run: |
          echo "a"
          file_path="${ENV_PATH:-.env.github}"
          echo "b"
          index=0
          echo "c"
          multiline_start_index=-1
          echo "d"
          json="["
          echo "e"
          while IFS= read -r line || [[ -n "$line" ]]; do
            echo "$line"
            has_multiline_character=$(echo "$line" | grep -F "'")
            echo "if?"
            if [[ -n "$has_multiline_character" && $multiline_start_index -eq -1 ]]; then
              echo "found a multiline value"
              multiline_start_index=$index
            elif [[ -n "$has_multiline_character" && $multiline_start_index -ne -1 ]]; then
              echo "found end of a multiline value"
              rows_with_value=$(sed -n "$((multiline_start_index+1)),$((index+1))p" "$file_path" | tr '\n' '\n')
              key=$(echo "$rows_with_value" | cut -d '=' -f 1)
              value=$(echo "$rows_with_value" | cut -d '=' -f 2- | sed "s/'//g")
              json+="{\"key\":\"$key\",\"value\":\"$value\"},"
              multiline_start_index=-1
            elif [[ -z "$has_multiline_character" && $multiline_start_index -ne -1 ]]; then
              echo "keep looking for end of multiline value"
              :
            else
              echo "Single-line value"
              key=$(echo "$line" | cut -d '=' -f 1)
              value=$(echo "$line" | cut -d '=' -f 2-)
              json+="{\"key\":\"$key\",\"value\":\"$value\"},"
            fi
            ((index++))
          echo "done"
          done < "$file_path"
          # Remove trailing comma and close the JSON array
          json="${json%?}]"
          echo "json"
          echo "$json"
          echo "json2"
          echo "envVars=$json" >> $GITHUB_ENV

      - name: Update App Settings ‚öôÔ∏è
        run: bunx caprover api --path=/user/apps/appDefinitions/update --method=POST --data='{ "appName":"${{ inputs.caproverAppName }}", "websocketSupport":${{ inputs.websocketSupport }}, "containerHttpPort":${{ inputs.containerHttpPort || 80 }}, "instanceCount":${{ inputs.instanceCount || 1 }}, "envVars":${{ env.envVars }} }'

      - name: Enable SSL üîí
        run: bunx caprover api --path=/user/apps/appDefinitions/enablebasedomainssl --method=POST --data='{"appName":"${{ inputs.caproverAppName }}"}'

      - uses: sarisia/actions-status-discord@v1
        if: ${{ failure() && inputs.discordWebhook }}
        with:
          webhook: ${{ inputs.discordWebhook }}
          url: ${{ inputs.deployTargetUrl || env.defaultDeployTargetUrl }}

      - uses: rtCamp/action-slack-notify@v2
        if: ${{ failure() && env.SLACK_WEBHOOK }}
        