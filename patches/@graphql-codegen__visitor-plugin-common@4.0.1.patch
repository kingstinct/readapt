diff --git a/cjs/base-resolvers-visitor.js b/cjs/base-resolvers-visitor.js
index 4d4adf34e1f5b9f0dbec01bbc21dcb1bc21085fa..23d19dbaa27868514ccb7b6f8aff7a603aba4fab 100644
--- a/cjs/base-resolvers-visitor.js
+++ b/cjs/base-resolvers-visitor.js
@@ -642,12 +642,62 @@ class BaseResolversVisitor extends base_visitor_js_1.BaseVisitor {
         return 'ContextType';
     }
     getContextType(parentName, node) {
+        const transformObjectNode = (
+            objectNode,
+          ) => {
+            const { fields } = objectNode
+            return fields.reduce((acc, field) => ({
+              ...acc,
+              [field.name]: handleValueNode(field.value),
+            }), {})
+          }
+        const handleValueNode = (
+            value
+          ) => {
+            if (value.kind === 'StringValue') {
+              return value.value
+            }
+            if (value.kind === 'ObjectValue') {
+              return transformObjectNode(value)
+            }
+            if (value.kind === 'ListValue') {
+              return value.values.map(handleValueNode)
+            }
+            if (value.kind === 'NullValue') {
+              return null
+            }
+            if (value.kind === 'BooleanValue') {
+              return value.value
+            }
+            if (value.kind === 'IntValue') {
+              return parseInt(value.value, 10)
+            }
+            if (value.kind === 'FloatValue') {
+              return parseFloat(value.value)
+            }
+            if (value.kind === 'EnumValue') {
+              return value.value
+            }
+          
+            const valueFromVariable = executionArgs?.variableValues?.[value.name.value]
+            return valueFromVariable
+          }
+
         let contextType = this.getFieldContextType(parentName, node);
         for (const directive of node.directives) {
             const name = directive.name;
             const directiveMap = this._directiveContextTypesMap[name];
             if (directiveMap) {
-                contextType = `${directiveMap.type}<${contextType}>`;
+                const args = directive.arguments.reduce((prev, dir) => {
+                    const { name, value } = dir
+                    
+                    return {
+                        ...prev, 
+                        [name]: handleValueNode(value)
+                    }
+                    
+                }, {})
+                contextType = `${directiveMap.type}<${contextType}, ${JSON.stringify(args)}>`;
             }
         }
         return contextType;