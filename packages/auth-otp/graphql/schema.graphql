scalar JSONObject

input AuthOr {
  includes: JSONObject
  match: JSONObject
}

directive @auth(
  match: JSONObject,
  skip: Boolean
  includes: JSONObject
  or: [AuthOr!]
) on FIELD_DEFINITION

type Mutation {
  loginRequest(email: String!): LoginRequestResponse! @auth(skip: true)
  loginConfirm(email: String!, code: String!): LoginConfirmResponse! @auth(skip: true)
  logout: LoginRequestSuccessResponse!
}

type LoginRequestSuccessResponse {
    success: Boolean! @auth(skip: true)
}

type EmailNotValidError implements Error {
    message: String! @auth(skip: true)
}

type CodeNotValidError implements Error {
    message: String! @auth(skip: true)
}

type LoginFailedError implements Error {
    message: String! @auth(skip: true)
}

union LoginRequestResponse = LoginRequestSuccessResponse | EmailNotValidError

type LoginConfirmSuccessfulResponse {
    bearerToken: String! @auth(skip: true)
    refreshToken: String! @auth(skip: true)
}

union LoginConfirmResponse = LoginConfirmSuccessfulResponse
  | EmailNotValidError
  | CodeNotValidError
  | LoginFailedError

interface Error {
  message: String! @auth(skip: true)
}
